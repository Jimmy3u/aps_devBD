#Configuração da URL do JBDC e o endereço do servidor Mysql/Mariadb tambem Cria a database caso não exista
spring.datasource.url = jdbc:mariadb://127.0.0.1:3306/aps?createDatabaseIfNotExist=true

# Usuario e senha do Servidor
spring.datasource.username=root
spring.datasource.password=<Sua senha do MYSQL/Mariadb>

#Declaração da classe do Driver JBDC
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# Configurações do Hibernate e do Spring data JPA

# Define se o Hibernate deve ou não criar as tabelas a partir dos Schemas/Models na inicialização do programa.
spring.jpa.generate-ddl=true

# Define como o hibernate prosseguira criando as tabelas ao iniciar o programa:
# CREATE - O Hibernate antes apaga qualquer tabela existente para então criar uma nova
# UPDATE - Compara a tabela ja existente com o Model e atualiza a tabela de acordo com ele
# CREATE-DROP - Igual ao create, porem deleta a tabela quando o programa termina sua execução
# VALIDATE - Apenas ve se a tabela existe e suas colunas estão de acordo com o modelo, caso não dispara uma exceção
spring.jpa.hibernate.ddl-auto=create

# Essa propriedade permite que criemos scripts SQL para serem executados na inicialização do nosso programa
# assim podemos ja preparar dados para serem inseridos nas tabelas que o Hibernate criou ou ate mesmo definirmos
# manualmente nossos Schemas(modelos).
spring.sql.init.mode=always

# Essa propriedade diz para o Spring esperar a criação das tabelas pelo hibernate antes de executar nossos
# scripts SQL, no caso nosso 'data.sql' para inserir os dados na tabela
spring.jpa.defer-datasource-initialization=true